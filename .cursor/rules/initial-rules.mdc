---
description: read this rules before begin the work
globs: 
---
Electron + SQLite + TypeORM project:

Project Context

Overview:
This project is built using Angular Material for UI components, Electron for cross-platform desktop applications, SQLite as the database, and TypeORM for object-relational mapping. All coding decisions and guidelines should be considered within this technical framework.

HTML and Angular Performance

Avoid Direct Function Calls in Templates:
Never call functions directly from your HTML templates. Angular evaluates these functions during every change detection cycle, which can severely degrade performance. Instead, consider using pipes or pre-computed properties to avoid unnecessary re-evaluations.

String Handling Consistency

Enforce Uppercase Storage:
Always store strings in uppercase to maintain consistency across the application. Only deviate from this rule if the user explicitly specifies a different format. This helps standars throughout the codebase.

Managing TypeScript and JavaScript Fiways modify the TypeScript (.ts) files, which are compiled into JavaScript (.js). Avoid editing generated .js files directly, as any changes will be overwritten during the next compilation. If a situation arises where both need editing, ensure they remain in sync.

Angular Module Organization

Reuse Existing Modules:
Do not create a new Angular module for each new component unless specifically requested. Instead, integrate new components into the closest existing module along the project’s directory structure. This maintains a clean and manageable module hierarchy.

Filter Form Implementation

Optimize Filtering Behavior:
When creating filter forms, do not implement live filtering (filtering on every value change) unless explicitly instructed. This approach minimizes performance overhead and avoids unnecessary processing, making the user experience smoother.

Theme Compatibility

Dynamic Styling:
The application supports both dark and light themes. Avoid hardcoding background colors or styles. Instead, use theme variables or classes to ensure that the UI adapts correctly to the current theme setting.

Table Layout and Alignment

Consistent and Readable Layouts:

General Alignment: Center-align most table content to provide a balanced and neat presentation.

Text Fields: For columns that contain names and descriptions (or other textual information), align the text to the start (left) to enhance readability.

Table Sorting Features

Conditional Implementation:
Do not include Angular Material’s sorting feature (mat-sort-header) in tables unless explicitly requested by the user. This keeps the interface uncluttered and avoids introducing unnecessary complexity or performance issues.

TypeORM Synchronization Setting

Development vs. Production:
The project currently uses TypeORM with synchronize: true, meaning the database schema automatically updates to match your entity definitions. Keep in mind that this is acceptable for development but should be revisited and changed when preparing for production deployment.

Confirmation Dialogs

Standardize Dialog Usage:
For all confirmation dialogs, always use the @confirmation-dialog.component.ts component. This ensures a consistent look and behavior for dialog interactions throughout the application.

New Entity Creation Guidelines

Maintain Consistency:
When creating a new entity, ensure that you generate both the TypeScript (.ts) and JavaScript (.js) files. Follow the detailed instructions provided in the @create-new-entities.mdc document to adhere to project-specific conventions and best practices.

New Component Structure

File Organization:
For any new component, always create the associated .ts (logic), .html (template), and .scss (styles) files. This modular approach ensures that the component's functionality, presentation, and styling are cleanly separated and maintainable.
---
description: read this rules before begin the work
globs: 
alwaysApply: false
---
# Project Guidelines

## Core Principles
1. **KISS (Keep It Simple, Stupid)**: Write simple, straightforward code. Avoid complexity unless absolutely necessary.

## Angular Template Performance
2. **NO DIRECT FUNCTION CALLS IN TEMPLATES**: Never do `{{ calculateValue() }}` or `[prop]="service.format()"`. Instead:
   - Store pre-computed values in component properties
   - Update properties when inputs change
   - Use pipes for transformations
   - Do not use getters, avoid any kind of function that can cause performance issue

## Coding Standards
3. **UPPERCASE STRINGS**: Store string values in UPPERCASE for consistency.
4. **EDIT TS FILES ONLY**: Never modify JS files directly; they are auto-generated from TS.
5. **NUMBER FORMATTING**: Always use `| number:'1.0-2'` format for numeric pipes.

## Component Architecture
6. **REUSE MODULES**: Don't create new modules unnecessarily. Add components to existing modules.
7. **COMPONENT FILES**: Always create separate .ts, .html, and .scss files for components.
8. **CONSISTENT NAMING**:
   - List components: `list-entity`
   - Create/Edit components: `create-edit-entity`
   - Dialogs: Add `-dialog` suffix

## UI/UX Guidelines
9. **FILTER IMPLEMENTATION**: Don't add live filtering unless requested. Use explicit filter buttons.
10. **THEME COMPATIBILITY**: Don't hardcode colors. Use theme variables for dark/light mode support.
11. **TABLE LAYOUT**:
    - Center-align most content
    - Left-align text fields
    - Don't add sorting (`mat-sort-header`) unless specifically requested
12. Never use hardcored colors for backgroud, we have dark and light theme

## Application Features
12. **CONFIRMATION DIALOGS**: Always use `@confirmation-dialog.component.ts` for all confirmations.
13. **TYPEORM SYNC**: Remember `synchronize: true` is for development only, not production.

## Backend
14. Always use [repository.service.ts](mdc:src/app/database/repository.service.ts) for getting data from database

## Creating new entity
15. See [presentacion.entity.js](mdc:src/app/database/entities/productos/presentacion.entity.js) to take as example
16. add methods on [repository.service.ts](mdc:src/app/database/repository.service.ts) [preload.ts](mdc:preload.ts) and the corresponding .handler.ts file, in this case for presentacion is [productos.handler.ts](mdc:electron/handlers/productos.handler.ts), import the new entity on [database.config.ts](mdc:src/app/database/database.config.ts) 
17. Always look for existing code example to take as example

## Remember
- These rules ensure application consistency and performance
- Default to these guidelines unless specifically instructed otherwise
- Follow this rules as our lives depends on it


